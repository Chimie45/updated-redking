var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

function ggWidgetUrl(url) {
	var hosts = new URL(window.location.origin);
	var domain_array = hosts.hostname.replace('www', '').split('.');

	if (hosts.hostname.replace('www', '').split('.').pop() === 'local')
		return url;

	if (window.ggEnvironment === 'production') {
		
		var cnt = domain_array.length;
		var widget = '';

		if (cnt >= 3 && domain_array[cnt - 2].length === 2) {
			widget = domain_array.splice(cnt - 3, 3).join('.');
		} else if (cnt >= 2) {
			widget = domain_array.splice(cnt - 2, 2).join('.');
		}

		if (widget) {
			return 'https://web.archive.org/web/20221102134249/https://widget.' + widget;
		} else {
			return url;
		}
	} else {
		return url;
	}
}

function setCookie(cname, cvalue, exdays) {
	var date = new Date();

	date.setTime(date.getTime() + (exdays * 24 * 60 * 60 * 1000));
	document.cookie = cname + '=' + cvalue + ';expires=' + date.toUTCString() + ';path=/;domain=' + window.ggCookieDomain + ';';
}

function getCookie(cookieName) {
	var name = cookieName + '=';
	var cookies = document.cookie.split(';');

	for (var i = 0; i < cookies.length; i++) {
		var cookie = cookies[i];
		while (cookie.charAt(0) === ' ') {
			cookie = cookie.substring(1);
		}
		if (cookie.indexOf(name) === 0) {
			return cookie.substring(name.length, cookie.length);
		}
	}

	return '';
}

function getHashParameters(key) {
	var hash = window.location.hash.substr(1).split('&');
	var params = {};

	jQuery(hash).each(function (i, row) {
		var [k, v] = row.split('=');

		if (k) {
			params[k] = v;
		}
	});

	if (key) {
		return params.hasOwnProperty(key) ? params[key] : '';
	} else {
		return params;
	}
}

function getQueryStringValue(key) {
	var vars = {};
	var hash;
	var queryString = window.location.search.substr(1);
	var parametersArray = queryString.split("&");

	for (var i = 0; i < parametersArray.length; i++) {
		hash = parametersArray[i].split("=");
		vars[hash[0]] = hash[1];
		vars[hash[0].toLocaleLowerCase()] = hash[1];
		vars[hash[0].toUpperCase()] = hash[1];
	}

	return vars[key] ? vars[key] : null;
}

function number_format(number, decimals, decPoint, thousandsSep) {
	// eslint-disable-line camelcase
	number = (number + "").replace(/[^0-9+\-Ee.]/g, "");
	var n = !isFinite(+number) ? 0 : +number;
	var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);
	var sep = typeof thousandsSep === "undefined" ? "," : thousandsSep;
	var dec = typeof decPoint === "undefined" ? "." : decPoint;
	var s = "";

	var toFixedFix = function (n, prec) {
		if (("" + n).indexOf("e") === -1) {
			return +(Math.round(n + "e+" + prec) + "e-" + prec);
		} else {
			var arr = ("" + n).split("e");
			var sig = "";
			if (+arr[1] + prec > 0) {
				sig = "+";
			}
			return (+(
				Math.round(+arr[0] + "e" + sig + (+arr[1] + prec)) +
				"e-" +
				prec
			)).toFixed(prec);
		}
	};

	// @todo: for IE parseFloat(0.55).toFixed(0) = 0;
	s = (prec ? toFixedFix(n, prec).toString() : "" + Math.round(n)).split(".");
	if (s[0].length > 3) {
		s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
	}
	if ((s[1] || "").length < prec) {
		s[1] = s[1] || "";
		s[1] += new Array(prec - s[1].length + 1).join("0");
	}

	return s.join(dec);
}

function json_decode(strJson) {
	var $global = (typeof window !== 'undefined' ? window : global)
	$global.$locutus = $global.$locutus || {}
	var $locutus = $global.$locutus
	$locutus.php = $locutus.php || {}

	var json = $global.JSON
	if (typeof json === 'object' && typeof json.parse === 'function') {
		try {
			return json.parse(strJson)
		} catch (err) {
			if (!(err instanceof SyntaxError)) {
				throw new Error('Unexpected error type in json_decode()')
			}

			$locutus.php.last_error_json = 4
			return null
		}
	}

	var chars = [
		'\u0000',
		'\u00ad',
		'\u0600-\u0604',
		'\u070f',
		'\u17b4',
		'\u17b5',
		'\u200c-\u200f',
		'\u2028-\u202f',
		'\u2060-\u206f',
		'\ufeff',
		'\ufff0-\uffff'
	].join('')
	var cx = new RegExp('[' + chars + ']', 'g')
	var j
	var text = strJson

	cx.lastIndex = 0
	if (cx.test(text)) {
		text = text.replace(cx, function (a) {
			return '\\u' + ('0000' + a.charCodeAt(0)
				.toString(16))
				.slice(-4)
		})
	}

	var m = (/^[\],:{}\s]*$/)
		.test(text.replace(/\\(?:["\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
			.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?/g, ']')
			.replace(/(?:^|:|,)(?:\s*\[)+/g, ''))

	if (m) {
		j = eval('(' + text + ')')
		return j
	}

	$locutus.php.last_error_json = 4
	return null
}

function json_encode(mixedVal) {
	var $global = (typeof window !== 'undefined' ? window : global)
	$global.$locutus = $global.$locutus || {}
	var $locutus = $global.$locutus
	$locutus.php = $locutus.php || {}

	var json = $global.JSON
	var retVal
	try {
		if (typeof json === 'object' && typeof json.stringify === 'function') {
			retVal = json.stringify(mixedVal)
			if (retVal === undefined) {
				throw new SyntaxError('json_encode')
			}
			return retVal
		}

		var value = mixedVal

		var quote = function (string) {
			var escapeChars = [
				'\u0000-\u001f',
				'\u007f-\u009f',
				'\u00ad',
				'\u0600-\u0604',
				'\u070f',
				'\u17b4',
				'\u17b5',
				'\u200c-\u200f',
				'\u2028-\u202f',
				'\u2060-\u206f',
				'\ufeff',
				'\ufff0-\uffff'
			].join('')
			var escapable = new RegExp('[\\"' + escapeChars + ']', 'g')
			var meta = {
				'\b': '\\b',
				'\t': '\\t',
				'\n': '\\n',
				'\f': '\\f',
				'\r': '\\r',
				'"': '\\"',
				'\\': '\\\\'
			}

			escapable.lastIndex = 0
			return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
				var c = meta[a]
				return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0)
					.toString(16))
					.slice(-4)
			}) + '"' : '"' + string + '"'
		}

		var _str = function (key, holder) {
			var gap = ''
			var indent = '    '
			var i = 0
			var k = ''
			var v = ''
			var length = 0
			var mind = gap
			var partial = []
			var value = holder[key]

			if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
				value = value.toJSON(key)
			}

			switch (typeof value) {
				case 'string':
					return quote(value)

				case 'number':
					return isFinite(value) ? String(value) : 'null'

				case 'boolean':
					return String(value)

				case 'object':
					if (!value) {
						return 'null'
					}

					gap += indent
					partial = []

					if (Object.prototype.toString.apply(value) === '[object Array]') {
						length = value.length
						for (i = 0; i < length; i += 1) {
							partial[i] = _str(i, value) || 'null'
						}

						v = partial.length === 0 ? '[]' : gap
							? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
							: '[' + partial.join(',') + ']'
						return v
					}

					for (k in value) {
						if (Object.hasOwnProperty.call(value, k)) {
							v = _str(k, value)
							if (v) {
								partial.push(quote(k) + (gap ? ': ' : ':') + v)
							}
						}
					}

					v = partial.length === 0 ? '{}' : gap
						? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
						: '{' + partial.join(',') + '}'
					return v
				case 'undefined':
				case 'function':
				default:
					throw new SyntaxError('json_encode')
			}
		}

		return _str('', {
			'': value
		})
	} catch (err) {
		if (!(err instanceof SyntaxError)) {
			throw new Error('Unexpected error type in json_encode()')
		}
		$locutus.php.last_error_json = 4
		return null
	}
}

function uuid() {
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
		var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
		return v.toString(16);
	});
}

function get_device_id() {
	var ggStorage = window.localStorage;
	var deviceId = ggStorage.getItem('device_id');

	if (!deviceId) {
		deviceId = uuid();
		ggStorage.setItem('device_id', deviceId);
	}

	return deviceId
}

function getAllQueryString() {
	var queryParams = {};
	var queryString = window.location.search.substr(1);
	var queryParts = queryString.split("&");
	jQuery(queryParts).each(function (i, row) {
		var [key, val] = row.split("=");
		queryParams[key] = val;
	});
	return queryParams;
}

function getQueryString(key) {
	var params = getAllQueryString();
	var result = params[key];
	return result ? result : null;
}

function displayCurrency(input, currency, digit, rate) {
	var val = (input || input === 0) ? input : 0;
	var absValue = Math.abs(val);
	var symbols = {
		USD: '$',
		EUR: '&euro;',
		GBP: '&pound;',
		CAD: 'CA$',
		CNY: '&yen;',
		JPY: 'JP&yen;',
		VND: '₫',
		THB: '฿',
		RUB: '₽',
		UAH: '₴',
		CZK: 'Kč',
		DKK: 'Kr.',
		NOK: 'kr',
		CHF: 'CHf',
		BRL: 'R$',
		INR: '₹',
		COP: 'COL$',
		MXN: 'MEX$',
		ARS: 'ARS$',
		RON: 'lei',
		PLN: 'zł',
		RSD: 'din',
		HUF: 'Ft',
		GEL: 'ლ',
		KRW: '₩',
		KZT: '₸',
		CLP: 'CL$',
		AUD: 'AU$',
	};
	var result = '';

	currency = currency ? currency : 'USD';
	digit = (digit || digit === 0) ? digit : 2;
	rate = (typeof rate === 'number') ? rate : 1;
	result += symbols[currency] + number_format((absValue * rate), digit);

	if (val < 0) {
		result = '-' + result;
	}

	return result;
}

function hasScrolled() {
	var scrollPosition = jQuery(window).scrollTop();
	var btnGoTop = jQuery('#showGoTop');
	if (scrollPosition > 56) {
		btnGoTop.addClass('show')
	} else {
		btnGoTop.removeClass('show')
	}
}

function showAside() {
	jQuery('.aside').addClass('show');
	jQuery('.aside-backdrop').addClass('show');
	jQuery('body').addClass('overflow-hidden');
}

function closeAside() {
	jQuery('.aside').removeClass('show');
	jQuery('.aside-backdrop').removeClass('show');
	jQuery('body').removeClass('overflow-hidden');
}

function mainHeaderMenu(id) {
	var navMenu = jQuery(id + ' > li');
	var ggPokerSubMenu = document.querySelectorAll(id + ' .submenu-box');
	var ggPokerSubMenuScroll = [];

	jQuery.each(ggPokerSubMenu, function(i, row) {
		ggPokerSubMenuScroll.push(new PerfectScrollbar(row));
	});

	navMenu.on('mouseover', function(e) {
		e.preventDefault();

		var self = jQuery(this);

		navMenu.removeClass('show');
		navMenu.find('ul.dropdown-menu').removeClass('show');

		self.addClass('show');
		self.find('ul.dropdown-menu').addClass('show');
		self.find('.submenu-box').width( self.find('ul.dropdown-menu').width() );
	});

	navMenu.on('mouseleave', function(e) {
		e.preventDefault();

		var self = jQuery(this);

		self.removeClass('show');
		self.find('ul.dropdown-menu').removeClass('show');
	});
}

function asideMenuAction(navMenu, self) {
	var parent = self.parent().parent();

	if (parent.hasClass('show')) {
		parent.removeClass('show');
		parent.find('ul.dropdown-menu').removeClass('show');
	} else {
		navMenu.removeClass('show');
		navMenu.find('ul.dropdown-menu').removeClass('show');

		parent.addClass('show');
		parent.find('ul.dropdown-menu').addClass('show');
	}
}

function asideMenu(id) {
	var navMenu = jQuery(id + ' > li');

	navMenu.find('span a').on('click', function(e) {
		e.preventDefault();

		var self = jQuery(this);

		if (self.attr('href') === '#') {
			asideMenuAction(navMenu, self);
		} else {
			window.location.href = self.attr('href');
		}
	});

	navMenu.find('span i').on('click', function(e) {
		e.preventDefault();

		asideMenuAction(navMenu, jQuery(this));
	});
}


}
/*
     FILE ARCHIVED ON 13:42:49 Nov 02, 2022 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 16:44:20 Jun 03, 2025.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 0.931
  exclusion.robots: 0.03
  exclusion.robots.policy: 0.013
  esindex: 0.013
  cdx.remote: 95.584
  LoadShardBlock: 129.807 (3)
  PetaboxLoader3.datanode: 158.413 (4)
  load_resource: 306.974
  PetaboxLoader3.resolve: 265.588
*/